1) define a functional interface "First" with an abstract method "void disp1()".
define a class "Second" with a method "void fun1()"

inside main function create a method reference for "First" and invoke "fun1" of "Second"
package Test1;

public interface First {
	void disp1();
}

package Test1;

public class Second {
	void fun1() {
		System.out.println("Inside fun1 function of Second class");
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Second s1=new Second();
		First ref=s1::fun1;
		ref.disp1();
	}
}

Output:
Inside fun1 function of Second class


2) define a functional interface "Third" with an abstract method "void show(int num)".
define a class "Sample" with a method "void disp(int num)"

inside main function create a method reference for "Third" and invoke "disp" of "Sample" by passing a value "500".

package Test1;

public interface Third {
	void show(int num);
}

package Test1;

public class Sample {
	void disp(int num) {
		System.out.println("Inside disp of Sample class with num "+num);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Sample s=new Sample();
		Third ref=s::disp;
		ref.show(100);
	}
}


