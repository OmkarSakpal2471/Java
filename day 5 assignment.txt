NAME:Omkar Sakpal
PRN No:230944520053


1) Create a multi-level inheritance , instantiate the child class and observe constructor invocation.Also show, if needed how will u invoke parent class constructor from child class ?


package InheritanceAssignment;


class GrandParent {
        private int x;
        GrandParent(int x){
                this.x=x;
                System.out.println("In Grand parent constructor");
        }
}


class Parent extends GrandParent {
        Parent(){
                super(8);
                System.out.println("In Parent Constructor");
        }
        
        Parent(int x){
                super(8);
                System.out.println("In Parent parameterized Constructor");
        }
        
        
}


class Child extends Parent{
        Child(){
                super(5);
                System.out.println("In Child Constructor");                
        }
        
        Child(int x){
                System.out.println("In Child  parametrized Constructor");
        }
        
}




public class ShapeDemo {




        public static void main(String[] args) {
                // TODO Auto-generated method stub
                Child c=new Child();
                System.out.println();
                c=new Child(6);
                


        }


}


2) create a class "Vehicle", define a method "public void start()" in it. From this class derive a class FourWheeler. How will u override "start()" method of parent class ?
package InheritanceAssignment;
class Vehicle{
        public void start() {
                System.out.println("Starting the vehicle");
        }
}


class FourWheeler extends Vehicle{
        public void start() {
                System.out.println("Starting the Fourwheeler");
        }
}




public class ShapeDemo {




        public static void main(String[] args) {
                // TODO Auto-generated method stub
                FourWheeler f=new FourWheeler();
                f.start();
        }


}




3) Go for Hierarchical inheritance, create instances of child class and observe constructor invocation.
package InheritanceAssignment;
class Vehicle{
        Vehicle(){
                System.out.println("In Vehicle Constructor");
        }
}


class FourWheeler extends Vehicle{
        FourWheeler(){
                System.out.println("In Fourwheeler constructor");
        }
}


class TwoWheeler extends Vehicle{
        TwoWheeler(){
                System.out.println("In TwoWheeler constructor");
        }
}
public class ShapeDemo {




        public static void main(String[] args) {
                // TODO Auto-generated method stub
                FourWheeler f=new FourWheeler();
                System.out.println();
                TwoWheeler t=new TwoWheeler();
                


        }


}


4) Create a class "Top1" with "disp1()" method.
From this class Derive "Bottom1", "Bottom2" and "Bottom3" classes ,override the "disp1()".
Now show how will u achieve dynamic polymorphism.
package InheritanceAssignment;
class Top1{
        void disp1() {
                System.out.println("In Top1 disp");
        }
}


class Bottom1 extends Top1{
        void disp1() {
                System.out.println("In Bottom1 disp");
        }
}


class Bottom2 extends Top1{
        void disp1() {
                System.out.println("In Bottom2 disp");
        }
}


class Bottom3 extends Top1{
        void disp1() {
                System.out.println("In Bottom3 disp");
        }
}
public class ShapeDemo {
         static void perform(Top1 ref) {
                ref.disp1();
        }


        public static void main(String[] args) {
                // TODO Auto-generated method stub
                perform(new Bottom1());
                perform(new Bottom2());
                perform(new Bottom3());


        }


}


5) create abstract class Shape. declare "draw()" function as abstract. From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call
their draw function.
package InheritanceAssignment;
abstract class Shape{
        abstract void draw();
}


class Triangle extends Shape{
        void draw(){
                System.out.println("draw Traingle");
        }
}


class Polygon extends Shape{
        void draw(){
                System.out.println("draw Polygon");
        }
}
class Circle extends Shape{
        void draw(){
                System.out.println("draw Circle");
        }
}






public class ShapeDemo {




        public static void main(String[] args) {
                // TODO Auto-generated method stub
                Shape arr[]=new Shape[3];
                arr[0]=new Triangle();
                arr[1]=new Polygon();
                arr[2]=new Circle();
                
                for(int i=0;i<arr.length;i++) {
                        arr[i].draw();
                }
                
                
        }


}


6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.


package InheritanceAssignment;
interface A{
        void disp1();
        
}


interface B extends A{
        void disp2();
}


class C implements B{
        public void disp1() {
                System.out.println("in disp1");
        }
        
        public void disp2() {
                System.out.println("in disp2");
        }
        
        void disp3() {
                System.out.println("in disp3");
        }
        
}




public class ShapeDemo {




        public static void main(String[] args) {
                // TODO Auto-generated method stub
                
                C c=new C();
                c.disp1();
                c.disp2();
                c.disp3();
                
                
                
        }


}


7) Define class "Parent1" with some data.
Define interface "Parent2" with some methods.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.
package InheritanceAssignment;


class Parent1{
        private int num;
        Parent1(int x){
                num=x;
        }
        public void getNum() {
                System.out.println(num);
        }
}


interface Parent2{
        void disp();
}


class Child extends Parent1 implements Parent2{
        Child(){
                super(5);
        }
        public void disp() {
                System.out.println("in disp");
        }
        
        public void disp1() {
                System.out.println("in disp1");
        }
}






public class ShapeDemo {




        public static void main(String[] args) {
                // TODO Auto-generated method stub
                Child c=new Child();
                c.disp();
                c.disp1();


                
                
                
        }


}
8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
        a) Default
        b) one parameter
        c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.
 package InheritanceAssignment;


class Base1{
        private int num;
        Base1(int x){
                num=x;
                System.out.println("In base Constructor "+num);
        }
}


class sub1 extends Base1{
        private int i;
        sub1(){
                super(11);
                System.out.println("In sub1 default constructor "+i);
        }
        
        sub1(int i){
                super(7);
                this.i=i;
                System.out.println("In sub1 one param constructor "+i);
        }
        
        sub1(int x,int y){
                super(x);
                i=y;
                System.out.println("In sub1 two param constructor "+i);
        }
}






public class ShapeDemo {




        public static void main(String[] args) {
                // TODO Auto-generated method stub
                
                sub1 s=new sub1(8);
                s=new sub1();
                s=new sub1(6,7);


                
                
                
        }


}


9) create interface "Game" , have an abstract method "play()". from this interface implements classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked. Call "perform()" method from main function.


package InheritanceAssignment;




interface Game{
        void play();
}


class Cricket implements Game{
        public void play() {
                System.out.println("play Cricket");
        }
}


class FootBall implements Game{
        public void play() {
                System.out.println("play Football");
        }
}


class Tennis implements Game{
        public void play() {
                System.out.println("play Tennis");
        }
}




public class Demo {


        public static void  perform(Game ref) {
                ref.play();
        }
        public static void main(String[] args) {
                // TODO Auto-generated method stub
                perform(new Cricket());
                perform(new FootBall());
                perform(new Tennis());
                                
        }


}