NAME:Omkar Sakpal
PRN No:230944520053




1)
public abstract class Course
{
        public void start()
        {
                // start process
        }
        public abstract double getFee();
        public abstract void evaluate();
}


define child classes of above abstract class
        DACDBDACourse extends Course
        MSCitCourse extends Course


show late binding with the help of "perform()" method.




solution:


Course.java
package Problem1;


public abstract class Course {
        public void start()
        {
                System.out.println("The Course is started Welcome Students");
        }
        public abstract double getFee();
        public abstract void evaluate();
}




DACDBDACourse.java


package Problem1;


public class DACDBDACourse extends Course {


        @Override
        public double getFee() {
                double fee = 1_25_000;
                return fee;
        }


        @Override
        public void evaluate() {
                System.out.println("Evalution is satrted for DAC and DBDA Course");
                
        }


}




MSCitCourse.java


package Problem1;


public class MSCitCourse extends Course {


        @Override
        public double getFee() {
                double fee = 20_000;
                return fee;
        }


        @Override
        public void evaluate() {
                System.out.println("Evalution of MS CIT Course is started");
        }


}


Demo.java


package Problem1;


public class Demo {
        static void perform(Course c) {
                c.start();
                c.getFee();
                c.evaluate();
        }


        public static void main(String[] args) {
                        
                perform(new DACDBDACourse());
                System.out.println();
                perform(new MSCitCourse());
                        
        }


}


output:


The Course is started Welcome Students
Evalution is satrted for DAC and DBDA Course


The Course is started Welcome Students
Evalution of MS CIT Course is started




.................................................................................................................................................
2)
abstract class Beverages {


        // Defined
        public void addMilk() {


        }


        // abstract
        abstract void addIngredients();
}


class Coffee extends Beverages
{
        void addIngredients()
        {
                // ingredients for Coffee
        }
        // addMilk inherited
}
class Tea extends Beverages
{
        void addIngredients()
        {
                // ingredients for Tea
        }
        // addMilk inherited
}
class FruitJuice extends Beverages
{
        void addIngredients()
        {
                // ingredients for FruitJuice
        }
        // addMilk inherited
}


create Array of Beverages class and store all the child classes objects.
now traverse the array and invoke all the functions.


Beverages.java
package Problem1;


public abstract class Beverages {


        // Defined
        public void addMilk() {
                System.out.println("Milk is add ed in the Drink");
        }


        // abstract
        abstract void addIngredients();
}




Beverages.java


package Problem1;


public class Tea extends Beverages{


        @Override
        void addIngredients() {
                System.out.println("Tea is added");
                
        }


}




Coffee.java
package Problem1;


public class Coffee extends Beverages{


        @Override
        void addIngredients() {
                System.out.println("Coffee is added");
                
        }


}




FruitJuice.java


package Problem1;


public class FruitJuice extends Beverages{


        @Override
        void addIngredients() {
                System.out.println("Fruit juice is added");
                
        }


}




Demo1.java


package Problem1;


public class Demo1 {
        public static void main(String[] args) {
                Beverages[] beverages = new Beverages[3];
                beverages[0] = new Coffee();
                beverages[1] = new Tea();
                beverages[2] = new FruitJuice();
                for (int i = 0; i < beverages.length; i++) {
                        beverages[i].addMilk();
                        beverages[i].addIngredients();
                        System.out.println();
                }


        }
}


output:


Milk is add ed in the Drink
Coffee is added


Milk is add ed in the Drink
Tea is added


Milk is add ed in the Drink
Fruit juice is added




.......................................................................................................................................................
3)
create abstract class "Shape" with
        a contract "draw()" and concrete behaviour "show()"


create 3 child classes
        Triangle, Rectangle and Circle


define a class "ShapeDemo" with main
inside main create an array of "Shape" of 3 elements. Store all the child class objects inside the array, traverse it and invoke "draw()" and "show()" methods polymorphically.








Shape.java


package Problem1;


public abstract class Shape {
         abstract void draw();
         void show() {
                 System.out.println("Shape is showing you ");
         }
}




Triangle.java


package Problem1;


public class Triangle extends Shape{


        @Override
        void draw() {
                System.out.println("Drawing the Triangle");
                
        }


}




Rectangle.java


package Problem1;


public class Rectangle extends Shape {
        @Override
        void draw() {
                System.out.println("Drawing the Rectangle");
                
        }
}






Circle.java


package Problem1;


public class Circle extends Shape{
        @Override
        void draw() {
                System.out.println("Drawing the Circle");
                
        }
}






ShapeDemo.java


package Problem1;


public class ShapeDemo {


        public static void main(String[] args) {
                Shape[] shape = new Shape[3];
                shape[0] = new Rectangle();
                shape[1] = new Circle();
                shape[2] = new Triangle();
                for (int i = 0; i < shape.length; i++) {
                        shape[i].show();
                        shape[i].draw();
                        System.out.println();
                }
                
        }


}


output:


Shape is showing you 
Drawing the Rectangle


Shape is showing you 
Drawing the Circle


Shape is showing you 
Drawing the Triangle






.......................................................................................................................................................
4)
public class UIComponent
{
}
public class Button extends UIComponent
{
}
public class TextField extends UIComponent
{
}
public class CheckBox extends UIComponent
{
}
public abstract class UIComponentCreator
{
        public void show(String type)
        {
                UIComponent comp=createUIComponent(type);
                add(comp);
        }
        public void add(UIComponent component)
        {
                System.out.prinlnt("Added the component\t"+component);
        }
        public abstract UIComponent createUIComponent(String type);
}


create 3 child classes of "UIComponentCreator"
        WindowsUIComponentCreator, LinuxUIComponentCreator and MacUIComponentCreator
 in all these classes "createUIComponent()" method must be defined in such a way that whatever type is passed as per this it must return a specific UIComponent. e.g. if "button" is passed , it should return "Button" class object   or if "textfield" is passed , it should return "TextField" class object.


create a class UIComponentCreatorDemo with main function
inside main function
        create objects of WindowsUIComponentCreator, LinuxUIComponentCreator and MacUIComponentCreator classes and invoke "createUIComponent()" ,"add()" and "show()" methods.




solution :




UIComponent.java


public class UIComponent {
        
}




Button.java


public class Button extends UIComponent {


}




TextField.java


public class TextField  extends UIComponent {


}




CheckBox.java


public class CheckBox  extends UIComponent{


}




UIComponentCreator.java


public abstract class UIComponentCreator {
        
        public void show(String type)
        {
                UIComponent comp = createUIComponent(type);
                add(comp);
        }
        
        public void add(UIComponent component)
        {
                System.out.println("Added the component\t"+component.getClass().getName());
        }
        
        public abstract UIComponent createUIComponent(String type);


}






WindowsUIComponentCreator.java


class WindowsUIComponentCreator extends UIComponentCreator {


        public UIComponent createUIComponent(String type) {
                // TODO Auto-generated method stub
                switch(type.toLowerCase()) {
                        case "button": return new Button(); 
                        case "textfield": return new TextField(); 
                        case "checkbox": return new CheckBox();
                        default : return null;
                }                
        }
}




LinuxUIComponentCreator.java


class LinuxUIComponentCreator extends UIComponentCreator {


        public UIComponent createUIComponent(String type) {
                // TODO Auto-generated method stub
                switch(type.toLowerCase()) {
                        case "button": return new Button(); 
                        case "textfield": return new TextField(); 
                        case "checkbox": return new CheckBox();
                        default : return null;
                }                
        }
}






MacUIComponentCreator.java


class MacUIComponentCreator extends UIComponentCreator {


        public UIComponent createUIComponent(String type) {
                // TODO Auto-generated method stub
                switch(type.toLowerCase()) {
                        case "button": return new Button(); 
                        case "textfield": return new TextField(); 
                        case "checkbox": return new CheckBox();
                        default : return null;
                }                
        }
}






UIComponentCreatorDemo.java


public class UIComponentCreatorDemo {


        public static void main(String[] args) {
                // TODO Auto-generated method stub
                
                UIComponentCreator ui[] = new UIComponentCreator[3];
                
                ui[0] = new WindowsUIComponentCreator();
                ui[1] = new LinuxUIComponentCreator();
                ui[2] = new MacUIComponentCreator();
                
                String components[] = {"button", "TextField", "CheckBox"};
                
                for(int i=0; i<ui.length; i++) {
                        ui[i].show(components[i]);
                        System.out.println();
                }
        }


}


Output:


Added the component        Button


Added the component        TextField


Added the component        CheckBox
.


......................................................................................................................................................
5)accept 3 numbers through command line arguments and display their sum.


Solution:
class CommandLine
{
        public static void main(String [] args)
        {
                int sum=0;
                for(int i =0;i<args.length;i++)
                {
                        sum+=Integer.parseInt(args[i]);
                }
                System.out.println(sum);
        }
}




.......................................................................................................................................................
6)on developer side:


create interface "Shape" with "void draw();" method.


now define child classes 
        Triangle,Rect and Circle






on Client side:


define "ShapeDemo" class with main and perform functions


define perform function in such a way that given any shape it can invoke "draw()" of it.






Solution:


devleoper side:
Shape.java


/**
 * 
 */
package devpack;


/**
 * @author Vedant
 */


public interface Shape {
        /**
         * 
         */
        void draw();
}




Circle.java


/**
 * 
 */
package devpack;


/**
 * 
 */
public class Circle implements Shape{


        @Override
        public void draw() {
                // TODO Auto-generated method stub
                System.out.println("Draw Circle");
        }
        
}




Triangle.java


/**
 * 
 */
package devpack;


/**
 * @author Vedant
 */
public class Triangle implements Shape {
        
        @Override
        public void draw() {
                // TODO Auto-generated method stub
                System.out.println("Draw triangle");
        }
}






Rectangle.java




/**
 * 
 */
package devpack;


/**
 * 
 */
public class Rectangle implements Shape{


        @Override
        public void draw() {
                // TODO Auto-generated method stub
                System.out.println("Draw Rectangle");
        }
        
}




client side:
DemoShape.java




package clientside;


import devpack.*;


public class DemoShape {


        public static void main(String[] args) {
                // TODO Auto-generated method stub
                Shape [] s = new Shape[3];
                s[0]= new Triangle();
                s[1]= new Circle();
                s[2]= new Rectangle();
                
                for(int i=0;i<s.length;i++) {
                        s[i].draw();
                }
        }


}




output:




Draw triangle
Draw Circle
Draw Rectangle






.......................................................................................................................................................
7)
public interface PizzaIngredientFactory
{
        public Dough createDough();
        public Sauce createSauce();
        public Cheese createCheese();
        public Pepperoni createPepperoni();
        public Clams createClams();
}
define 2 implementations 
        USPizzaIngredientFactory and IndianPizzaIngredientFactory


create an array of "PizzaIngredientFactory" , store all the implemenations object inside it, traverse the array and invoke all the methods.




solution:




PizzaIngredientFactory.java


interface PizzaIngredientFactory
{
        Dough createDough();
        Sauce createSauce();
        Cheese createCheese();
        Pepperoni createPepperoni();
        Clams createClams();
}






USPizzaIngredientFactory.java


class USPizzaIngredientFactory implements PizzaIngredientFactory
{
        public Dough createDough()
        {
                return new Dough();
        }
        public Sauce createSauce()
        {
                return new Sauce();
        }
        public Cheese createCheese()
        {
                return new Cheese();
        }
        public Pepperoni createPepperoni()
        {
                return new Pepperoni();
        }
        public Clams createClams()
        {
                return new Clams();
        }
}






IndianPizzaIngredientFactory.java


class IndianPizzaIngredientFactory implements PizzaIngredientFactory
{
        public Dough createDough()
        {
                return new Dough();
        }
        public Sauce createSauce()
        {
                return new Sauce();
        }
        public Cheese createCheese()
        {
                return new Cheese();
        }
        public Pepperoni createPepperoni()
        {
                return new Pepperoni();
        }
        public Clams createClams()
        {
                return new Clams();
        }
}






Dough.java


class Dough
{
        public String toString()
        {
                return " Dough is Ready ";
        }
}






Sauce.java


class Sauce
{
        public String toString()
        {
                return " Sauce is Ready ";
        }
}






Cheese.java


class Cheese
{
        public String toString()
        {
                return " Cheese is Ready ";
        }
}






Pepperoni.java


class Pepperoni
{
        public String toString()
        {
                return " Pepperoni is Ready ";
        }
}






Clams.java


class Clams
{
        public String toString()
        {
                return " Clams is Ready ";
        }
}






Demo.java


public class Demo
{
        public static void main(String args[])
        {
                PizzaIngredientFactory pizzaIngredientFactory[] = new PizzaIngredientFactory[2];
                pizzaIngredientFactory[0] = new IndianPizzaIngredientFactory();
                pizzaIngredientFactory[1] = new USPizzaIngredientFactory();
                for(int i=0; i<pizzaIngredientFactory.length; i++)
                {
                        System.out.println(pizzaIngredientFactory[i].createDough());
                        System.out.println(pizzaIngredientFactory[i].createSauce());
                        System.out.println(pizzaIngredientFactory[i].createCheese());
                        System.out.println(pizzaIngredientFactory[i].createPepperoni());
                        System.out.println(pizzaIngredientFactory[i].createClams());
                        System.out.println();


                }
        }
}


output:
 Dough is Ready 
 Sauce is Ready 
 Cheese is Ready 
 Pepperoni is Ready 
 Clams is Ready 


 Dough is Ready 
 Sauce is Ready 
 Cheese is Ready 
 Pepperoni is Ready 
 Clams is Ready 


.......................................................................................................................................................
8)
public class Course
{
        public void start()
        {
        }
        public void stop()
        {
        }
}
now define 3 child classes 
        DACDBDACourse,MSCit and Basic


inside "DACDBDACourse" class define one more method "public void orientation()"


define one more class "CourseDemo" with main function.
inside main function
        create an array of "Course" of 3 elements.
store all the child classes objects. Traverse the array and invoke "start()" and "stop()" of all the objects. Also invoke "orientation()" method wherever object of "DACDBDACourse" is present.


Soultion:




Course.java


package Problem8;


public class Course {
        void start() {
                System.out.println("Course is Started");
        }
        void Stop() {
                System.out.println("Course Stoped");
        }


}








DACDBDACourse.java


package Problem8;


public class DACDBDACourse extends Course{
        public void orientation() {
                System.out.println("Orientation is Started");
        }
}






MSCit.java


package Problem8;


public class MSCit extends Course{


}








Basic.java


package Problem8;


public class Basic extends Course{


}






DemoCourse.java


package Problem8;


public class DemoCourse {
        
        public static void main(String[] args) {
                Course course[] = new Course[3];
                course[0] = new DACDBDACourse();
                course[1] = new MSCit();
                course[2]= new Basic();
                
                for(int i =0 ;i<course.length;i++) {
                        course[i].start();
                        if( course[i] instanceof DACDBDACourse ) {
                                DACDBDACourse d =(DACDBDACourse)course[i];
                                d.orientation();
                        }
                        course[i].Stop();
                        System.out.println();
                }


        }


}


Output:


DACDBDACourse Course is Started
Orientation is Started for DACDBDACourse
DACDBDACourse Course Stoped


MSCit Course is Started
MSCit Course Stoped


Basic Course is Started
Basic Course Stoped








.......................................................................................................................................................
9)
Interface Course
{
        void start();
        void stop();
}
now define 3 implementations: 
        DACDBDACourse,MSCit and Basic


inside "DACDBDACourse" class define one more method "public void orientation()"


define one more class "CourseDemo" with main function and "public static void show()" method.
from main function
        invoke "show()" method by passing object of any implementations and invoke "start()" and "stop()" methods. Also invoke "orientation()" method whenever object of "DACDBDACourse" is passed.




Soultion :






Course.java


package Problem8;


public interface Course {
        void start();
        void Stop();


}






DACDBDACourse.java


package Problem8;


public class DACDBDACourse implements Course{
        
        public void start() {
                System.out.println("DACDBDACourse Course is Started");
        }
        public void Stop() {
                System.out.println("DACDBDACourse Course Stoped");
        }
        
        public void orientation() {
                System.out.println("Orientation is Started for DACDBDACourse");
        }
}








MSCit.java


package Problem8;


public class MSCit implements Course{
        public void start() {
                System.out.println("MSCit Course is Started");
        }
        public void Stop() {
                System.out.println("MSCit Course Stoped");
        }
}








Basic.java


package Problem8;


public class Basic implements Course{
        
        public void start() {
                System.out.println("Basic Course is Started");
        }
        public void Stop() {
                System.out.println("Basic Course Stoped");
        }
}








DemoCourse.java


package Problem8;


public class DemoCourse {
        
        public static void main(String[] args) {
                Course course[] = new Course[3];
                course[0] = new DACDBDACourse();
                course[1] = new MSCit();
                course[2]= new Basic();
                
                for(int i =0 ;i<course.length;i++) {
                        course[i].start();
                        if( course[i] instanceof DACDBDACourse ) {
                                DACDBDACourse d =(DACDBDACourse)course[i];
                                d.orientation();
                        }
                        course[i].Stop();
                        System.out.println();
                }


        }


}




Output:


DACDBDACourse Course is Started
Orientation is Started for DACDBDACourse
DACDBDACourse Course Stoped


MSCit Course is Started
MSCit Course Stoped


Basic Course is Started
Basic Course Stoped






.......................................................................................................................................................
10)
create a class "Demo" with "disp()" which can take variable number of int arguments and display the sum of all numbers passed to it.
invoke "disp()" from main function.




package Problem8;


public class Demo {


        static void disp(int ... k) {
                int sum=0;
                for(int i =0 ;i<k.length;i++) {
                        sum += k[i];
                }
                System.out.println(sum);
        }
        
        public static void main(String[] args) {
                disp();
                disp(10);
                disp(10,20,30);
                disp(10,20,30,40);
                
        }


}




Output:
0
10
60
100