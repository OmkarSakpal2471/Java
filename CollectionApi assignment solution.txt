1) accept 10 numbers from user and add them inside the ArrayList.
using List Iterator display all the numbers bidirectionally.

package Test1;


import java.util.*;

public class Hello {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Integer> list=new ArrayList<Integer>();
		Scanner sc=new Scanner(System.in);
		for(int i=1;i<=4;i++) {
			System.out.println("Enter the number");
			list.add(sc.nextInt());
		}
		ListIterator<Integer> itr=list.listIterator();
		while(itr.hasNext()) {
			System.out.print(itr.next()+" ");
		}
		System.out.println();
		while(itr.hasPrevious()) {
			System.out.print(itr.previous()+" ");
		}
	}

}
Output:
Enter the number
1
Enter the number
2
Enter the number
3
Enter the number
4
Enter the number
5
Enter the number
6
Enter the number
7
Enter the number
8
Enter the number
9
Enter the number
10
1 2 3 4 5 6 7 8 9 10 
10 9 8 7 6 5 4 3 2 1 


3) create LinkedList with the values 10,20,30 and 40.
display it.
now insert 500 in the beginning.
	insert 400 at 2nd position.
	add 1000 at the end.
display the list again.
package Test1;

import java.util.*;

public class LinkeList {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Integer> list=new LinkedList<Integer>();
		list.add(10);
		list.add(20);
		list.add(30);
		list.add(40);
		((LinkedList)list).addFirst(500);
		list.add(1,400);
		((LinkedList)list).addLast(1000);
		System.out.println(list);
	}
}
output:
[500, 400, 10, 20, 30, 40, 1000]

4) add 5 numbers inside CopyOnWriteArrayList and show how can you add one more number at the same time of traversal through its iterator.
package Test1;

import java.util.*;
import java.util.concurrent.CopyOnWriteArrayList;

public class Modified {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Integer> list=new CopyOnWriteArrayList<Integer>();
		for(int i=1;i<=5;i++) {
			list.add(i*10);
		}
		Iterator itr=list.iterator();
		while(itr.hasNext()) {
			itr.next();
			list.add(100);
		}
		System.out.println(list);
	}
}
Output:
[10, 20, 30, 40, 50, 100, 100, 100, 100, 100]

6) create a HashMap.
store  prn no. and students name of 10 students inside the HashMap.
display it using iterator.
package Test1;

import java.util.*;
import java.util.Map.Entry;

public class HashMap12 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Map<Integer,String> map=new HashMap<Integer,String>();
		map.put(45, "Rohit Sharma");
		map.put(18,"Virat Kohli");
		Set<Entry<Integer, String>> set=map.entrySet();
		Iterator itr=set.iterator();
		while(itr.hasNext()) {

			System.out.println(itr.next());
		}
		
	}

}
Output:
18=Virat Kohli
45=Rohit Sharma

7) create a hierarchy as follows
	interface Game- play() method
	Derive at least 3 classes from it. ( Cricket, Chess and Football )
Now Create generic class which can take Game type (i.e. any sub type of Game) as parameter.
In this class try to call the play() method of the class which is passed to it.
package Test1;

public class Sample<T extends Game> {
public static void playing(Game ref) {
	ref.play();
}
static void fun1() {
	System.out.println("In fun1 of Sample");
}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		playing(new Cricket());
		playing(new Chess());
		playing(new Football());
	}
}
Output:
Play cricket
Play chess
Play Football


8) Define a class "Employee" with following members
empid, empname, desig, basic.
Define a parameterised constructor which will take all these values while creating an instance.
Also define "disp()" method which will display all these details.
create 4 employees and save them in "ArrayList".
Now save this "ArrayList" in a file.
Open file , read "ArrayList" , traverse ArrayList and call "disp()" for all the objects.

package Test1;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.*;

public class Employee implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private int empid;
	private String empname;
	private String desig;
	Employee(int num,String name,String post){
		empid=num;
		empname=name;
		desig=post;
	}
	public void disp() {
		System.out.println(empid+" "+empname+" "+desig);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Employee> list=new ArrayList<Employee>();
		Employee e1=new Employee(12,"Omkar","Officer");
		Employee e2=new Employee(13,"Om"," jr Officer");
		Employee e3=new Employee(14,"Onkar"," sr Officer");
		list.add(e1);
		list.add(e2);
		list.add(e3);

		
		File f=new File("D:\\File handling\\Myself.txt");
		FileInputStream fis=null;
		FileOutputStream fos=null;
		ObjectOutputStream oos=null;
		ObjectInputStream ois=null;
		try {
			fos=new FileOutputStream(f);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			oos=new ObjectOutputStream(fos);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			oos.writeObject(list);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			fis=new FileInputStream(f);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		try {
			ois=new ObjectInputStream(fis);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		List<?> l=null;
		try {
			l=(List<?>) ois.readObject();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		Iterator<?> itr=l.iterator();
		while(itr.hasNext()) {
			Employee ref=(Employee)itr.next();
			ref.disp();
		}
		
		
		
	}
	

}
Output:
12 Omkar Officer
13 Om  jr Officer
13 Onkar  sr Officer

9) maintain ICC ranking of at least 5 batsmen in the "HashMap".
list should be maintain as "rank" "name"
e.g. "1" "Rohit Sharma".
Now ask any rank bet'n 1 to 5 from user. ( user input).
if user asks for a particular rank , retrieve batsman name for that rank from the HashMap.
