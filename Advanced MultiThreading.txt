1) create a multi-threaded application by using Thread pool.create 2 threads. each thread should display characters from A to J. [ make sure while one thread executes , other thread should not interfere ]

package Day9;
import java.util.concurrent.*;
class MyApp implements Runnable{
	synchronized public static void disp() {
		for(char i='A';i<='J';i++)
		System.out.println(Thread.currentThread().getName()+" "+i+" ");
	}
	public void run() {
		disp();
	}
}
public class AdvanceMulti {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ExecutorService exec=Executors.newFixedThreadPool(2);
		for(int i=0;i<2;i++)
		exec.execute(new MyApp());
		
		System.out.println("After submitting task");
		exec.shutdown();

	}

}
Output:
After submitting task
pool-1-thread-1 A 
pool-1-thread-1 B 
pool-1-thread-1 C 
pool-1-thread-1 D 
pool-1-thread-1 E 
pool-1-thread-1 F 
pool-1-thread-1 G 
pool-1-thread-1 H 
pool-1-thread-1 I 
pool-1-thread-1 J 
pool-1-thread-2 A 
pool-1-thread-2 B 
pool-1-thread-2 C 
pool-1-thread-2 D 
pool-1-thread-2 E 
pool-1-thread-2 F 
pool-1-thread-2 G 
pool-1-thread-2 H 
pool-1-thread-2 I 
pool-1-thread-2 J 


2) create a multi-threaded application by using Thread pool.create 2 threads. each thread should display numbers from 1 to 10. [ make sure while one thread executes , other thread should not interfere ]
Also when first thread displays nos. from 1 to 5 it should released the lock and allow other thread to display nos. from 1 to 5 and then previous thread will display nos. from 6 to 10 and so on.package Day9;
import java.util.concurrent.*;
class MyApp implements Runnable{


	synchronized public void disp() {
		while(true) {
			for(int i=1;i<=10;i++) {
				System.out.println(Thread.currentThread().getName()+" "+i);
				if(i==5) {
					try {
						wait(100);
						
					}catch(InterruptedException ie) {
						ie.printStackTrace();
					}

				}
			}
			break;
		}
		

	}
	public void run() {
		disp();
	}
}
public class AdvanceMulti {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ExecutorService exec=Executors.newFixedThreadPool(2);
		MyApp m1=new MyApp();
	
		exec.execute(m1);
		exec.execute(m1);
		
		
		System.out.println("After submitting task");
		exec.shutdown();

	}

}

Output:After submitting task
pool-1-thread-1 1
pool-1-thread-1 2
pool-1-thread-1 3
pool-1-thread-1 4
pool-1-thread-1 5
pool-1-thread-2 1
pool-1-thread-2 2
pool-1-thread-2 3
pool-1-thread-2 4
pool-1-thread-2 5
pool-1-thread-1 6
pool-1-thread-1 7
pool-1-thread-1 8
pool-1-thread-1 9
pool-1-thread-1 10
pool-1-thread-2 6
pool-1-thread-2 7
pool-1-thread-2 8
pool-1-thread-2 9
pool-1-thread-2 10






3) create a multi-threaded application by using Thread pool and ReentrantLock (explicit locking) .create 2 threads. each thread should display characters from A to J. [ make sure while one thread executes , other thread should not interfere ]
package Day9;
import java.util.concurrent.*;
import java.util.concurrent.locks.ReentrantLock;
class MyApp implements Runnable{
	static ReentrantLock myLock=new ReentrantLock();
	 public static void disp() {
		myLock.lock();
		for(char i='A';i<='J';i++)
		System.out.println(Thread.currentThread().getName()+" "+i+" ");
		
		myLock.unlock();
	}
	public void run() {
		disp();
	}
}
public class AdvanceMulti {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		ExecutorService exec=Executors.newFixedThreadPool(2);
		
		for(int i=0;i<2;i++)
		exec.execute(new MyApp());
		
		System.out.println("After submitting task");
		exec.shutdown();

	}

}
Output:
After submitting task
pool-1-thread-1 A 
pool-1-thread-1 B 
pool-1-thread-1 C 
pool-1-thread-1 D 
pool-1-thread-1 E 
pool-1-thread-1 F 
pool-1-thread-1 G 
pool-1-thread-1 H 
pool-1-thread-1 I 
pool-1-thread-1 J 
pool-1-thread-2 A 
pool-1-thread-2 B 
pool-1-thread-2 C 
pool-1-thread-2 D 
pool-1-thread-2 E 
pool-1-thread-2 F 
pool-1-thread-2 G 
pool-1-thread-2 H 
pool-1-thread-2 I 
pool-1-thread-2 J 

4) create a multi-threaded application by using Thread pool and ReentrantLock.create 2 threads. each thread should display numbers from 1 to 10. [ make sure while one thread executes , other thread should not interfere ]
Also when first thread displays nos. from 1 to 5 it should released the lock and allow other thread to display nos. from 1 to 5 and then previous thread will display nos. from 6 to 10 and so on.


